// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// readFile
Rcpp::List readFile(const std::string filename);
RcppExport SEXP _PolygonSoup_readFile(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(readFile(filename));
    return rcpp_result_gen;
END_RCPP
}
// writeFile
void writeFile(const std::string filename, const bool binary, const int precision, const Rcpp::NumericMatrix Vertices, const Rcpp::List Faces);
RcppExport SEXP _PolygonSoup_writeFile(SEXP filenameSEXP, SEXP binarySEXP, SEXP precisionSEXP, SEXP VerticesSEXP, SEXP FacesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const bool >::type binary(binarySEXP);
    Rcpp::traits::input_parameter< const int >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type Vertices(VerticesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Faces(FacesSEXP);
    writeFile(filename, binary, precision, Vertices, Faces);
    return R_NilValue;
END_RCPP
}
// SurfEMesh
Rcpp::List SurfEMesh(const Rcpp::List rmesh, const bool isTriangle, const bool triangulate, const bool clean, const bool normals);
RcppExport SEXP _PolygonSoup_SurfEMesh(SEXP rmeshSEXP, SEXP isTriangleSEXP, SEXP triangulateSEXP, SEXP cleanSEXP, SEXP normalsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type rmesh(rmeshSEXP);
    Rcpp::traits::input_parameter< const bool >::type isTriangle(isTriangleSEXP);
    Rcpp::traits::input_parameter< const bool >::type triangulate(triangulateSEXP);
    Rcpp::traits::input_parameter< const bool >::type clean(cleanSEXP);
    Rcpp::traits::input_parameter< const bool >::type normals(normalsSEXP);
    rcpp_result_gen = Rcpp::wrap(SurfEMesh(rmesh, isTriangle, triangulate, clean, normals));
    return rcpp_result_gen;
END_RCPP
}
// SurfQMesh
Rcpp::List SurfQMesh(const Rcpp::List rmesh, const bool isTriangle, const bool triangulate, const bool clean, const bool normals);
RcppExport SEXP _PolygonSoup_SurfQMesh(SEXP rmeshSEXP, SEXP isTriangleSEXP, SEXP triangulateSEXP, SEXP cleanSEXP, SEXP normalsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type rmesh(rmeshSEXP);
    Rcpp::traits::input_parameter< const bool >::type isTriangle(isTriangleSEXP);
    Rcpp::traits::input_parameter< const bool >::type triangulate(triangulateSEXP);
    Rcpp::traits::input_parameter< const bool >::type clean(cleanSEXP);
    Rcpp::traits::input_parameter< const bool >::type normals(normalsSEXP);
    rcpp_result_gen = Rcpp::wrap(SurfQMesh(rmesh, isTriangle, triangulate, clean, normals));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PolygonSoup_readFile", (DL_FUNC) &_PolygonSoup_readFile, 1},
    {"_PolygonSoup_writeFile", (DL_FUNC) &_PolygonSoup_writeFile, 5},
    {"_PolygonSoup_SurfEMesh", (DL_FUNC) &_PolygonSoup_SurfEMesh, 5},
    {"_PolygonSoup_SurfQMesh", (DL_FUNC) &_PolygonSoup_SurfQMesh, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_PolygonSoup(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
